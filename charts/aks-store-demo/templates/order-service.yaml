apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-configmap
data:  
  ORDER_QUEUE_HOSTNAME: "{{ .Values.orderService.queueHost }}"
  ORDER_QUEUE_PORT: "{{ .Values.orderService.queuePort }}"
  ORDER_QUEUE_NAME: "{{ .Values.orderService.queueName }}"
  FASTIFY_ADDRESS: "0.0.0.0"
  {{- if .Values.orderService.queueTransport }}
  ORDER_QUEUE_TRANSPORT: "{{ .Values.orderService.queueTransport }}"
  {{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: order-service-secret
data:
  ORDER_QUEUE_USERNAME: "{{ .Values.orderService.queueUsername | b64enc  }}"
  ORDER_QUEUE_PASSWORD: "{{ .Values.orderService.queuePassword | b64enc  }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: order-service
        image: {{ .Values.orderService.image.repository }}:{{ .Values.orderService.image.tag }}
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: order-service-configmap
        - secretRef:
            name: order-service-secret
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
      {{- if eq .Values.orderService.useAzureServiceBus false }}
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;']
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  selector:
    app: order-service